seed =	1309503288


/*****************************************************************/
/*******************		GRAPH 0		****************/
/*****************************************************************/
TOTAL number of edges = 	1500
For Graph generation	0.013534 seconds.

=========	CASE 0	=========

Finding max capacity path	from 733-------to--------55	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
55, 469, 442, 847, 63, 938, 74, 148, 937, 402, 598, 724, 17, 212, 537, 813, 959, 518, 54, 53, 31, 215, 810, 425, 927, 452, 179, 33, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 583, 600, 781, 790, 548, 338, 995, 694, 863, 975, 741, 140, 472, 800, 729, 474, 558, 365, 840, 733

ALGORITHM : Dijkstra's using Heap
55, 469, 442, 847, 63, 938, 74, 148, 937, 402, 114, 823, 10, 175, 229, 850, 616, 580, 613, 832, 215, 810, 425, 927, 452, 179, 33, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 583, 600, 781, 790, 548, 338, 995, 694, 863, 975, 741, 140, 472, 800, 729, 474, 558, 365, 840, 733

ALGORITHM : Kruskal Max Spanning Tree 
55, 469, 442, 847, 63, 938, 74, 148, 937, 402, 598, 724, 17, 212, 537, 813, 959, 518, 54, 53, 31, 215, 810, 425, 927, 452, 179, 33, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 583, 600, 781, 790, 548, 338, 995, 694, 863, 975, 741, 140, 472, 800, 729, 474, 558, 365, 840, 733.
Summary :
Dijksra' W/out heap 	 took 0.00084 seconds.	&Found max capacity =	6693
Dijksra' WITH heap 	 took 0.000385 seconds.	&Found max capacity =	6693
Kruskal  MST algo 	 took 0.001211 seconds.	&Found max capacity =	6693

=========	CASE 1	=========

Finding max capacity path	from 315-------to--------575	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
575, 253, 359, 686, 191, 390, 822, 76, 741, 975, 863, 694, 995, 338, 548, 790, 498, 638, 912, 693, 122, 953, 540, 58, 21, 699, 315

ALGORITHM : Dijkstra's using Heap
575, 253, 359, 686, 191, 390, 822, 76, 741, 975, 863, 694, 995, 338, 548, 790, 498, 638, 912, 693, 122, 953, 540, 58, 21, 699, 315

ALGORITHM : Kruskal Max Spanning Tree 
575, 253, 359, 686, 191, 390, 822, 76, 455, 333, 484, 785, 150, 968, 72, 81, 331, 146, 632, 837, 892, 903, 297, 29, 813, 959, 518, 54, 53, 31, 215, 810, 425, 927, 452, 179, 33, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 583, 600, 781, 790, 498, 638, 912, 693, 122, 953, 540, 58, 21, 699, 315.
Summary :
Dijksra' W/out heap 	 took 0.0002 seconds.	&Found max capacity =	6264
Dijksra' WITH heap 	 took 0.000409 seconds.	&Found max capacity =	6264
Kruskal  MST algo 	 took 0.000948 seconds.	&Found max capacity =	6264

=========	CASE 2	=========

Finding max capacity path	from 386-------to--------425	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
425, 927, 452, 179, 33, 20, 120, 294, 17, 724, 598, 402, 937, 148, 74, 938, 63, 66, 663, 160, 714, 420, 260, 363, 325, 386

ALGORITHM : Dijkstra's using Heap
425, 927, 452, 179, 33, 20, 120, 294, 17, 724, 598, 402, 937, 148, 74, 938, 63, 66, 663, 160, 714, 420, 260, 363, 325, 386

ALGORITHM : Kruskal Max Spanning Tree 
425, 810, 215, 31, 53, 54, 518, 959, 813, 537, 212, 17, 724, 598, 402, 937, 148, 74, 938, 63, 66, 663, 160, 714, 420, 260, 363, 325, 386.
Summary :
Dijksra' W/out heap 	 took 0.000216 seconds.	&Found max capacity =	6693
Dijksra' WITH heap 	 took 0.000151 seconds.	&Found max capacity =	6693
Kruskal  MST algo 	 took 0.000958 seconds.	&Found max capacity =	6693

=========	CASE 3	=========

Finding max capacity path	from 282-------to--------726	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
726, 44, 225, 582, 897, 671, 520, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 268, 458, 609, 279, 15, 282

ALGORITHM : Dijkstra's using Heap
726, 44, 225, 582, 897, 671, 520, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 268, 458, 609, 279, 15, 282

ALGORITHM : Kruskal Max Spanning Tree 
726, 44, 225, 582, 897, 671, 520, 20, 120, 910, 184, 665, 920, 77, 7, 507, 366, 921, 986, 268, 458, 609, 279, 15, 282.
Summary :
Dijksra' W/out heap 	 took 0.000686 seconds.	&Found max capacity =	6856
Dijksra' WITH heap 	 took 0.000284 seconds.	&Found max capacity =	6856
Kruskal  MST algo 	 took 0.000956 seconds.	&Found max capacity =	6856

=========	CASE 4	=========

Finding max capacity path	from 332-------to--------755	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
755, 853, 726, 44, 225, 582, 897, 671, 520, 20, 33, 179, 452, 927, 425, 810, 215, 31, 53, 54, 518, 959, 813, 537, 212, 17, 724, 598, 402, 114, 823, 10, 175, 527, 332

ALGORITHM : Dijkstra's using Heap
755, 853, 726, 44, 225, 582, 897, 671, 520, 20, 33, 179, 452, 927, 425, 810, 215, 31, 53, 54, 518, 959, 813, 537, 212, 17, 724, 598, 402, 114, 823, 10, 175, 527, 332

ALGORITHM : Kruskal Max Spanning Tree 
755, 853, 726, 44, 225, 582, 897, 671, 520, 20, 33, 179, 452, 927, 425, 810, 215, 31, 53, 54, 518, 959, 813, 537, 212, 17, 724, 598, 402, 114, 823, 10, 175, 527, 332.
Summary :
Dijksra' W/out heap 	 took 0.001145 seconds.	&Found max capacity =	3468
Dijksra' WITH heap 	 took 0.00053 seconds.	&Found max capacity =	3468
Kruskal  MST algo 	 took 0.000997 seconds.	&Found max capacity =	3468


/*****************************************************************/
/*******************		GRAPH 1		****************/
/*****************************************************************/
TOTAL number of edges = 	1500
For Graph generation	0.010178 seconds.

=========	CASE 0	=========

Finding max capacity path	from 102-------to--------161	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
161, 650, 35, 74, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 927, 667, 144, 378, 156, 874, 146, 700, 295, 709, 422, 148, 113, 444, 909, 653, 363, 124, 312, 834, 16, 369, 929, 177, 725, 862, 881, 470, 241, 364, 102

ALGORITHM : Dijkstra's using Heap
161, 650, 35, 74, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 927, 667, 144, 378, 156, 874, 146, 700, 295, 709, 422, 148, 113, 444, 909, 653, 363, 124, 312, 834, 16, 369, 929, 177, 725, 862, 881, 470, 241, 364, 102

ALGORITHM : Kruskal Max Spanning Tree 
161, 650, 35, 74, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 927, 667, 144, 378, 156, 874, 146, 700, 295, 709, 422, 148, 113, 444, 909, 653, 363, 124, 312, 834, 16, 369, 929, 177, 725, 862, 881, 470, 241, 364, 102.
Summary :
Dijksra' W/out heap 	 took 0.001017 seconds.	&Found max capacity =	4619
Dijksra' WITH heap 	 took 0.000457 seconds.	&Found max capacity =	4619
Kruskal  MST algo 	 took 0.000907 seconds.	&Found max capacity =	4619

=========	CASE 1	=========

Finding max capacity path	from 66-------to--------640	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
640, 24, 129, 621, 300, 543, 610, 279, 832, 131, 889, 841, 118, 419, 876, 492, 66

ALGORITHM : Dijkstra's using Heap
640, 187, 423, 990, 440, 210, 468, 390, 34, 596, 985, 212, 13, 571, 754, 121, 87, 768, 111, 575, 867, 250, 847, 238, 205, 762, 757, 725, 862, 140, 134, 85, 890, 281, 78, 282, 449, 299, 814, 815, 86, 687, 907, 972, 615, 398, 68, 524, 44, 181, 578, 903, 539, 587, 594, 362, 876, 492, 66

ALGORITHM : Kruskal Max Spanning Tree 
640, 24, 129, 621, 935, 19, 223, 880, 408, 927, 667, 144, 378, 156, 874, 146, 700, 295, 709, 422, 148, 113, 444, 909, 653, 484, 492, 66.
Summary :
Dijksra' W/out heap 	 took 0.000947 seconds.	&Found max capacity =	3735
Dijksra' WITH heap 	 took 0.000232 seconds.	&Found max capacity =	3735
Kruskal  MST algo 	 took 0.000853 seconds.	&Found max capacity =	3735

=========	CASE 2	=========

Finding max capacity path	from 552-------to--------465	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
465, 192, 768, 111, 792, 281, 78, 282, 449, 299, 814, 552

ALGORITHM : Dijkstra's using Heap
465, 192, 768, 111, 792, 689, 23, 589, 110, 303, 630, 747, 505, 958, 299, 814, 552

ALGORITHM : Kruskal Max Spanning Tree 
465, 192, 605, 294, 837, 806, 278, 404, 905, 219, 229, 235, 636, 608, 214, 955, 694, 804, 227, 505, 958, 299, 814, 552.
Summary :
Dijksra' W/out heap 	 took 0.000202 seconds.	&Found max capacity =	4286
Dijksra' WITH heap 	 took 4.9e-05 seconds.	&Found max capacity =	4286
Kruskal  MST algo 	 took 0.000818 seconds.	&Found max capacity =	4286

=========	CASE 3	=========

Finding max capacity path	from 384-------to--------763	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
763, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 800, 631, 702, 642, 426, 384

ALGORITHM : Dijkstra's using Heap
763, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 800, 631, 702, 642, 426, 384

ALGORITHM : Kruskal Max Spanning Tree 
763, 341, 710, 170, 227, 505, 747, 242, 266, 225, 748, 223, 880, 408, 800, 631, 702, 642, 426, 384.
Summary :
Dijksra' W/out heap 	 took 0.000144 seconds.	&Found max capacity =	8405
Dijksra' WITH heap 	 took 6.3e-05 seconds.	&Found max capacity =	8405
Kruskal  MST algo 	 took 0.000808 seconds.	&Found max capacity =	8405

=========	CASE 4	=========

Finding max capacity path	from 466-------to--------372	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
372, 586, 994, 503, 14, 691, 839, 943, 388, 396, 155, 251, 259, 779, 255, 957, 279, 832, 131, 889, 159, 420, 765, 829, 649, 466

ALGORITHM : Dijkstra's using Heap
372, 586, 994, 503, 14, 691, 839, 943, 388, 396, 155, 251, 259, 779, 255, 957, 279, 832, 131, 889, 159, 420, 765, 829, 649, 466

ALGORITHM : Kruskal Max Spanning Tree 
372, 586, 994, 503, 14, 691, 839, 943, 388, 396, 155, 251, 259, 779, 255, 957, 279, 832, 131, 889, 159, 420, 765, 829, 649, 466.
Summary :
Dijksra' W/out heap 	 took 0.000248 seconds.	&Found max capacity =	7165
Dijksra' WITH heap 	 took 0.000116 seconds.	&Found max capacity =	7165
Kruskal  MST algo 	 took 0.000831 seconds.	&Found max capacity =	7165


/*****************************************************************/
/*******************		GRAPH 2		****************/
/*****************************************************************/
TOTAL number of edges = 	1500
For Graph generation	0.008923 seconds.

=========	CASE 0	=========

Finding max capacity path	from 732-------to--------177	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
177, 37, 343, 344, 143, 419, 505, 725, 73, 679, 381, 7, 987, 617, 819, 287, 260, 257, 767, 732

ALGORITHM : Dijkstra's using Heap
177, 37, 343, 344, 143, 419, 505, 725, 73, 679, 381, 7, 987, 617, 819, 287, 260, 257, 767, 732

ALGORITHM : Kruskal Max Spanning Tree 
177, 37, 343, 344, 143, 419, 505, 725, 73, 679, 381, 7, 987, 617, 819, 287, 260, 257, 767, 732.
Summary :
Dijksra' W/out heap 	 took 3.5e-05 seconds.	&Found max capacity =	7117
Dijksra' WITH heap 	 took 2.6e-05 seconds.	&Found max capacity =	7117
Kruskal  MST algo 	 took 0.000808 seconds.	&Found max capacity =	7117

=========	CASE 1	=========

Finding max capacity path	from 318-------to--------650	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
650, 607, 17, 807, 278, 474, 563, 804, 616, 318

ALGORITHM : Dijkstra's using Heap
650, 607, 561, 166, 698, 622, 516, 721, 117, 887, 194, 544, 66, 132, 895, 324, 6, 210, 534, 967, 299, 199, 937, 513, 888, 798, 255, 807, 278, 474, 563, 804, 616, 318

ALGORITHM : Kruskal Max Spanning Tree 
650, 826, 528, 612, 282, 261, 297, 382, 47, 750, 453, 478, 704, 797, 879, 49, 442, 497, 144, 636, 467, 513, 888, 798, 255, 807, 278, 474, 563, 804, 616, 318.
Summary :
Dijksra' W/out heap 	 took 8e-05 seconds.	&Found max capacity =	3501
Dijksra' WITH heap 	 took 6.2e-05 seconds.	&Found max capacity =	3501
Kruskal  MST algo 	 took 0.000761 seconds.	&Found max capacity =	3501

=========	CASE 2	=========

Finding max capacity path	from 65-------to--------646	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
646, 231, 891, 337, 793, 636, 467, 513, 888, 798, 255, 807, 17, 607, 650, 826, 528, 612, 875, 197, 198, 410, 604, 600, 203, 468, 295, 126, 3, 737, 810, 315, 233, 450, 869, 0, 610, 65

ALGORITHM : Dijkstra's using Heap
646, 231, 891, 337, 793, 636, 144, 497, 442, 49, 879, 797, 704, 478, 453, 948, 33, 728, 252, 614, 907, 508, 370, 236, 327, 198, 410, 604, 600, 203, 468, 295, 126, 3, 737, 810, 315, 233, 450, 869, 0, 610, 65

ALGORITHM : Kruskal Max Spanning Tree 
646, 231, 891, 337, 793, 636, 144, 497, 442, 49, 879, 797, 704, 478, 453, 750, 47, 382, 297, 261, 282, 612, 875, 197, 198, 410, 604, 600, 203, 468, 295, 126, 3, 737, 810, 315, 233, 450, 869, 0, 610, 65.
Summary :
Dijksra' W/out heap 	 took 0.000431 seconds.	&Found max capacity =	6852
Dijksra' WITH heap 	 took 0.000102 seconds.	&Found max capacity =	6852
Kruskal  MST algo 	 took 0.000772 seconds.	&Found max capacity =	6852

=========	CASE 3	=========

Finding max capacity path	from 502-------to--------433	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
433, 310, 264, 913, 578, 230, 959, 421, 389, 195, 995, 317, 893, 172, 502

ALGORITHM : Dijkstra's using Heap
433, 310, 832, 49, 442, 497, 992, 8, 78, 429, 308, 652, 749, 319, 394, 756, 481, 140, 460, 850, 271, 792, 995, 317, 893, 172, 502

ALGORITHM : Kruskal Max Spanning Tree 
433, 310, 832, 49, 879, 797, 704, 478, 453, 750, 47, 382, 297, 899, 105, 806, 275, 11, 463, 142, 874, 935, 892, 91, 936, 55, 259, 914, 570, 346, 172, 502.
Summary :
Dijksra' W/out heap 	 took 0.000815 seconds.	&Found max capacity =	2615
Dijksra' WITH heap 	 took 7.2e-05 seconds.	&Found max capacity =	2615
Kruskal  MST algo 	 took 0.000721 seconds.	&Found max capacity =	2615

=========	CASE 4	=========

Finding max capacity path	from 572-------to--------461	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
461, 751, 387, 331, 207, 98, 924, 771, 826, 528, 612, 282, 238, 383, 837, 791, 871, 475, 85, 694, 572

ALGORITHM : Dijkstra's using Heap
461, 751, 387, 428, 665, 718, 401, 249, 816, 805, 225, 454, 731, 467, 513, 888, 798, 255, 396, 781, 364, 962, 778, 974, 679, 381, 7, 987, 617, 819, 287, 260, 213, 298, 354, 794, 18, 654, 738, 740, 197, 875, 612, 282, 238, 383, 837, 791, 871, 475, 85, 694, 572

ALGORITHM : Kruskal Max Spanning Tree 
461, 751, 387, 428, 782, 464, 236, 327, 198, 197, 875, 612, 282, 238, 383, 837, 791, 871, 475, 85, 694, 572.
Summary :
Dijksra' W/out heap 	 took 0.000758 seconds.	&Found max capacity =	4607
Dijksra' WITH heap 	 took 0.00016 seconds.	&Found max capacity =	4607
Kruskal  MST algo 	 took 0.000708 seconds.	&Found max capacity =	4607


/*****************************************************************/
/*******************		GRAPH 3		****************/
/*****************************************************************/
TOTAL number of edges = 	1500
For Graph generation	0.008076 seconds.

=========	CASE 0	=========

Finding max capacity path	from 745-------to--------717	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
717, 104, 436, 412, 582, 882, 781, 976, 97, 915, 769, 859, 19, 76, 7, 139, 301, 169, 959, 804, 831, 369, 565, 131, 745

ALGORITHM : Dijkstra's using Heap
717, 104, 436, 412, 582, 882, 781, 976, 97, 915, 769, 859, 19, 76, 7, 139, 301, 169, 959, 804, 831, 369, 565, 131, 745

ALGORITHM : Kruskal Max Spanning Tree 
717, 104, 436, 412, 582, 882, 781, 976, 97, 915, 769, 859, 19, 76, 7, 139, 301, 169, 959, 804, 831, 369, 565, 131, 745.
Summary :
Dijksra' W/out heap 	 took 0.000103 seconds.	&Found max capacity =	7009
Dijksra' WITH heap 	 took 0.000105 seconds.	&Found max capacity =	7009
Kruskal  MST algo 	 took 0.000711 seconds.	&Found max capacity =	7009

=========	CASE 1	=========

Finding max capacity path	from 635-------to--------791	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
791, 994, 336, 979, 639, 314, 953, 390, 215, 962, 86, 573, 306, 635

ALGORITHM : Dijkstra's using Heap
791, 994, 336, 391, 712, 177, 683, 637, 965, 311, 744, 469, 493, 344, 844, 966, 285, 578, 681, 664, 947, 727, 612, 609, 81, 647, 942, 236, 22, 34, 748, 961, 158, 258, 764, 0, 359, 651, 529, 234, 928, 340, 564, 306, 635

ALGORITHM : Kruskal Max Spanning Tree 
791, 994, 181, 592, 96, 937, 26, 910, 518, 488, 715, 408, 650, 727, 612, 609, 881, 509, 224, 7, 139, 301, 169, 959, 804, 831, 369, 565, 131, 745, 997, 798, 564, 306, 635.
Summary :
Dijksra' W/out heap 	 took 0.000577 seconds.	&Found max capacity =	3435
Dijksra' WITH heap 	 took 0.000244 seconds.	&Found max capacity =	3435
Kruskal  MST algo 	 took 0.000708 seconds.	&Found max capacity =	3435

=========	CASE 2	=========

Finding max capacity path	from 191-------to--------368	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
368, 888, 990, 550, 820, 581, 696, 509, 881, 609, 612, 727, 947, 664, 681, 578, 285, 966, 844, 344, 544, 203, 405, 225, 230, 777, 475, 624, 525, 376, 913, 723, 987, 29, 700, 940, 286, 191

ALGORITHM : Dijkstra's using Heap
368, 888, 990, 550, 820, 581, 696, 509, 881, 609, 612, 727, 947, 664, 681, 578, 285, 966, 844, 344, 544, 203, 405, 225, 230, 777, 475, 624, 525, 376, 913, 723, 987, 29, 700, 940, 286, 191

ALGORITHM : Kruskal Max Spanning Tree 
368, 888, 990, 550, 820, 581, 696, 509, 881, 609, 612, 727, 947, 664, 681, 578, 285, 966, 844, 344, 544, 203, 405, 225, 230, 777, 475, 624, 525, 376, 913, 723, 987, 29, 700, 940, 286, 191.
Summary :
Dijksra' W/out heap 	 took 0.000859 seconds.	&Found max capacity =	1394
Dijksra' WITH heap 	 took 0.000364 seconds.	&Found max capacity =	1394
Kruskal  MST algo 	 took 0.000676 seconds.	&Found max capacity =	1394

=========	CASE 3	=========

Finding max capacity path	from 772-------to--------787	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
787, 574, 993, 383, 799, 848, 553, 863, 154, 133, 403, 860, 992, 678, 353, 895, 801, 911, 879, 315, 87, 463, 517, 257, 742, 921, 135, 718, 602, 662, 455, 376, 525, 624, 475, 777, 230, 225, 405, 203, 544, 344, 844, 966, 285, 578, 681, 664, 947, 727, 612, 609, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 976, 781, 546, 402, 763, 772

ALGORITHM : Dijkstra's using Heap
787, 574, 993, 383, 799, 848, 553, 863, 154, 133, 403, 860, 992, 678, 353, 895, 801, 911, 879, 315, 87, 463, 517, 257, 742, 921, 135, 718, 602, 662, 455, 376, 525, 624, 475, 777, 230, 225, 405, 203, 544, 344, 844, 966, 285, 578, 681, 664, 947, 727, 612, 609, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 976, 781, 546, 402, 763, 772

ALGORITHM : Kruskal Max Spanning Tree 
787, 574, 993, 383, 799, 848, 553, 863, 154, 133, 403, 860, 992, 678, 353, 895, 801, 911, 879, 315, 87, 463, 517, 257, 742, 921, 135, 718, 602, 662, 455, 376, 525, 624, 475, 777, 230, 225, 405, 203, 544, 344, 844, 966, 285, 578, 681, 664, 947, 727, 612, 609, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 976, 781, 546, 402, 763, 772.
Summary :
Dijksra' W/out heap 	 took 0.00075 seconds.	&Found max capacity =	6163
Dijksra' WITH heap 	 took 0.000339 seconds.	&Found max capacity =	6163
Kruskal  MST algo 	 took 0.000716 seconds.	&Found max capacity =	6163

=========	CASE 4	=========

Finding max capacity path	from 120-------to--------348	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
348, 704, 24, 207, 673, 423, 83, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 738, 437, 61, 703, 599, 470, 982, 649, 347, 209, 646, 57, 42, 208, 786, 231, 388, 471, 120

ALGORITHM : Dijkstra's using Heap
348, 704, 24, 207, 673, 423, 83, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 738, 437, 61, 703, 599, 470, 982, 649, 347, 209, 646, 57, 42, 208, 786, 231, 388, 471, 120

ALGORITHM : Kruskal Max Spanning Tree 
348, 704, 24, 207, 673, 423, 83, 881, 509, 224, 7, 76, 19, 859, 769, 915, 97, 738, 437, 61, 703, 599, 470, 982, 649, 347, 209, 646, 57, 42, 208, 786, 231, 388, 471, 120.
Summary :
Dijksra' W/out heap 	 took 0.000232 seconds.	&Found max capacity =	7102
Dijksra' WITH heap 	 took 0.000162 seconds.	&Found max capacity =	7102
Kruskal  MST algo 	 took 0.000706 seconds.	&Found max capacity =	7102


/*****************************************************************/
/*******************		GRAPH 4		****************/
/*****************************************************************/
TOTAL number of edges = 	1500
For Graph generation	0.007356 seconds.

=========	CASE 0	=========

Finding max capacity path	from 271-------to--------817	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
817, 356, 234, 108, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486, 314, 210, 41, 542, 859, 693, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 14, 373, 190, 271

ALGORITHM : Dijkstra's using Heap
817, 356, 234, 108, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486, 314, 210, 41, 542, 859, 693, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 14, 373, 190, 271

ALGORITHM : Kruskal Max Spanning Tree 
817, 356, 234, 108, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486, 314, 210, 41, 542, 859, 693, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 14, 373, 190, 271.
Summary :
Dijksra' W/out heap 	 took 0.000122 seconds.	&Found max capacity =	7837
Dijksra' WITH heap 	 took 9.7e-05 seconds.	&Found max capacity =	7837
Kruskal  MST algo 	 took 0.000787 seconds.	&Found max capacity =	7837

=========	CASE 1	=========

Finding max capacity path	from 329-------to--------162	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
162, 427, 67, 676, 884, 934, 904, 678, 376, 189, 537, 473, 769, 634, 975, 829, 562, 180, 942, 541, 171, 420, 144, 696, 268, 289, 329

ALGORITHM : Dijkstra's using Heap
162, 427, 67, 676, 884, 934, 904, 678, 376, 189, 537, 473, 769, 634, 975, 829, 562, 180, 942, 541, 171, 420, 144, 696, 268, 289, 329

ALGORITHM : Kruskal Max Spanning Tree 
162, 427, 67, 676, 884, 934, 904, 678, 376, 189, 537, 473, 769, 634, 975, 829, 562, 180, 942, 541, 171, 420, 144, 696, 268, 289, 329.
Summary :
Dijksra' W/out heap 	 took 8.3e-05 seconds.	&Found max capacity =	7774
Dijksra' WITH heap 	 took 3.1e-05 seconds.	&Found max capacity =	7774
Kruskal  MST algo 	 took 0.000834 seconds.	&Found max capacity =	7774

=========	CASE 2	=========

Finding max capacity path	from 393-------to--------551	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
551, 215, 332, 597, 222, 753, 970, 132, 636, 444, 844, 273, 731, 870, 968, 966, 863, 492, 963, 762, 601, 158, 482, 240, 832, 543, 355, 243, 938, 874, 847, 447, 571, 484, 961, 541, 942, 180, 562, 410, 26, 992, 161, 373, 14, 602, 287, 888, 956, 772, 305, 986, 13, 393

ALGORITHM : Dijkstra's using Heap
551, 215, 332, 517, 38, 328, 350, 343, 21, 471, 788, 516, 629, 833, 936, 682, 970, 132, 636, 444, 844, 836, 238, 951, 675, 684, 402, 120, 322, 11, 574, 7, 658, 508, 995, 16, 792, 102, 186, 948, 737, 303, 200, 460, 826, 388, 850, 262, 523, 890, 570, 855, 978, 416, 412, 358, 665, 827, 31, 400, 220, 390, 602, 287, 888, 956, 772, 305, 986, 13, 393

ALGORITHM : Kruskal Max Spanning Tree 
551, 215, 332, 597, 222, 753, 970, 682, 936, 833, 629, 516, 788, 605, 632, 919, 468, 710, 230, 636, 444, 844, 836, 238, 951, 675, 684, 402, 120, 322, 11, 574, 7, 658, 508, 995, 16, 792, 102, 186, 948, 737, 303, 200, 460, 826, 388, 850, 262, 523, 890, 570, 855, 978, 416, 257, 199, 496, 80, 280, 282, 31, 400, 220, 390, 602, 287, 888, 956, 772, 305, 986, 13, 393.
Summary :
Dijksra' W/out heap 	 took 0.000639 seconds.	&Found max capacity =	6680
Dijksra' WITH heap 	 took 0.000231 seconds.	&Found max capacity =	6680
Kruskal  MST algo 	 took 0.00065 seconds.	&Found max capacity =	6680

=========	CASE 3	=========

Finding max capacity path	from 486-------to--------586	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
586, 945, 44, 704, 563, 794, 292, 648, 773, 929, 784, 419, 962, 359, 506, 6, 730, 133, 324, 984, 306, 754, 9, 70, 532, 274, 467, 0, 709, 839, 349, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486

ALGORITHM : Dijkstra's using Heap
586, 945, 44, 704, 563, 794, 292, 648, 773, 929, 784, 419, 962, 359, 506, 6, 730, 133, 324, 984, 306, 754, 9, 70, 532, 274, 467, 0, 709, 839, 349, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486

ALGORITHM : Kruskal Max Spanning Tree 
586, 945, 44, 704, 563, 794, 292, 648, 773, 929, 784, 419, 962, 359, 506, 6, 730, 133, 324, 984, 306, 754, 9, 70, 532, 274, 467, 0, 709, 839, 349, 989, 249, 49, 727, 755, 921, 455, 168, 251, 821, 143, 751, 486.
Summary :
Dijksra' W/out heap 	 took 0.000755 seconds.	&Found max capacity =	5389
Dijksra' WITH heap 	 took 0.000344 seconds.	&Found max capacity =	5389
Kruskal  MST algo 	 took 0.000627 seconds.	&Found max capacity =	5389

=========	CASE 4	=========

Finding max capacity path	from 124-------to--------598	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
598, 584, 382, 397, 81, 353, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 390, 220, 400, 31, 282, 280, 80, 496, 199, 257, 124

ALGORITHM : Dijkstra's using Heap
598, 584, 382, 397, 81, 353, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 14, 373, 161, 992, 26, 410, 562, 829, 975, 634, 769, 473, 537, 189, 376, 678, 904, 934, 941, 500, 435, 677, 398, 879, 374, 299, 91, 47, 708, 199, 257, 124

ALGORITHM : Kruskal Max Spanning Tree 
598, 584, 382, 397, 81, 353, 752, 630, 701, 805, 339, 925, 309, 864, 284, 503, 772, 956, 888, 287, 602, 390, 220, 400, 31, 282, 280, 80, 496, 199, 257, 124.
Summary :
Dijksra' W/out heap 	 took 0.00071 seconds.	&Found max capacity =	5869
Dijksra' WITH heap 	 took 0.000321 seconds.	&Found max capacity =	5869
Kruskal  MST algo 	 took 0.000595 seconds.	&Found max capacity =	5869


/*****************************************************************/
/*******************		GRAPH 5		****************/
/*****************************************************************/
TOTAL number of edges = 	123492
For Graph generation	0.113107 seconds.

=========	CASE 0	=========

Finding max capacity path	from 57-------to--------485	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
485, 620, 366, 766, 461, 261, 538, 557, 54, 580, 132, 706, 887, 882, 296, 39, 315, 709, 40, 607, 193, 958, 22, 49, 834, 537, 57

ALGORITHM : Dijkstra's using Heap
485, 620, 366, 766, 461, 261, 538, 557, 54, 580, 132, 706, 887, 882, 296, 39, 315, 709, 40, 607, 193, 958, 22, 49, 834, 537, 57

ALGORITHM : Kruskal Max Spanning Tree 
485, 620, 366, 766, 461, 261, 538, 557, 54, 580, 132, 706, 887, 882, 296, 39, 315, 709, 40, 532, 126, 535, 940, 990, 958, 22, 49, 834, 537, 57.
Summary :
Dijksra' W/out heap 	 took 0.012829 seconds.	&Found max capacity =	16278
Dijksra' WITH heap 	 took 0.011445 seconds.	&Found max capacity =	16278
Kruskal  MST algo 	 took 0.032454 seconds.	&Found max capacity =	16278

=========	CASE 1	=========

Finding max capacity path	from 66-------to--------737	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
737, 24, 908, 623, 119, 399, 612, 698, 187, 248, 994, 151, 66

ALGORITHM : Dijkstra's using Heap
737, 24, 908, 623, 119, 399, 612, 698, 187, 248, 994, 151, 66

ALGORITHM : Kruskal Max Spanning Tree 
737, 24, 908, 623, 119, 399, 612, 698, 507, 667, 637, 545, 322, 244, 343, 617, 216, 590, 535, 940, 151, 66.
Summary :
Dijksra' W/out heap 	 took 0.012216 seconds.	&Found max capacity =	16206
Dijksra' WITH heap 	 took 0.012066 seconds.	&Found max capacity =	16206
Kruskal  MST algo 	 took 0.03217 seconds.	&Found max capacity =	16206

=========	CASE 2	=========

Finding max capacity path	from 379-------to--------780	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
780, 8, 366, 766, 461, 992, 91, 448, 409, 205, 171, 628, 152, 59, 216, 590, 62, 67, 29, 295, 379

ALGORITHM : Dijkstra's using Heap
780, 8, 366, 766, 461, 261, 538, 557, 302, 546, 457, 618, 124, 18, 768, 190, 248, 994, 151, 940, 535, 590, 62, 67, 29, 295, 379

ALGORITHM : Kruskal Max Spanning Tree 
780, 915, 465, 442, 388, 46, 344, 132, 706, 887, 882, 296, 39, 315, 709, 40, 532, 126, 535, 590, 62, 67, 29, 295, 379.
Summary :
Dijksra' W/out heap 	 took 0.006412 seconds.	&Found max capacity =	16238
Dijksra' WITH heap 	 took 0.008971 seconds.	&Found max capacity =	16238
Kruskal  MST algo 	 took 0.031996 seconds.	&Found max capacity =	16238

=========	CASE 3	=========

Finding max capacity path	from 598-------to--------627	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
627, 757, 204, 615, 789, 227, 370, 35, 235, 203, 80, 889, 39, 315, 709, 40, 532, 126, 535, 398, 505, 598

ALGORITHM : Dijkstra's using Heap
627, 757, 204, 615, 789, 227, 370, 35, 235, 203, 80, 889, 39, 315, 709, 40, 532, 126, 535, 398, 505, 598

ALGORITHM : Kruskal Max Spanning Tree 
627, 757, 204, 615, 789, 227, 370, 35, 235, 203, 80, 889, 39, 315, 709, 40, 532, 126, 535, 398, 505, 598.
Summary :
Dijksra' W/out heap 	 took 0.009895 seconds.	&Found max capacity =	16275
Dijksra' WITH heap 	 took 0.009724 seconds.	&Found max capacity =	16275
Kruskal  MST algo 	 took 0.047578 seconds.	&Found max capacity =	16275

=========	CASE 4	=========

Finding max capacity path	from 79-------to--------470	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
470, 277, 556, 917, 714, 102, 79

ALGORITHM : Dijkstra's using Heap
470, 277, 556, 917, 714, 102, 79

ALGORITHM : Kruskal Max Spanning Tree 
470, 277, 556, 683, 194, 213, 783, 414, 494, 83, 175, 958, 990, 940, 535, 126, 532, 251, 76, 879, 574, 722, 596, 402, 531, 102, 79.
Summary :
Dijksra' W/out heap 	 took 0.005396 seconds.	&Found max capacity =	16289
Dijksra' WITH heap 	 took 0.001355 seconds.	&Found max capacity =	16289
Kruskal  MST algo 	 took 0.042586 seconds.	&Found max capacity =	16289


/*****************************************************************/
/*******************		GRAPH 6		****************/
/*****************************************************************/
TOTAL number of edges = 	123306
For Graph generation	0.087729 seconds.

=========	CASE 0	=========

Finding max capacity path	from 113-------to--------819	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
819, 621, 776, 253, 113

ALGORITHM : Dijkstra's using Heap
819, 621, 776, 253, 113

ALGORITHM : Kruskal Max Spanning Tree 
819, 621, 776, 253, 113.
Summary :
Dijksra' W/out heap 	 took 0.010332 seconds.	&Found max capacity =	16274
Dijksra' WITH heap 	 took 0.009941 seconds.	&Found max capacity =	16274
Kruskal  MST algo 	 took 0.032618 seconds.	&Found max capacity =	16274

=========	CASE 1	=========

Finding max capacity path	from 297-------to--------694	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
694, 232, 298, 121, 274, 69, 442, 436, 51, 879, 744, 716, 515, 324, 86, 194, 79, 170, 391, 551, 652, 191, 919, 789, 447, 66, 57, 990, 23, 200, 297

ALGORITHM : Dijkstra's using Heap
694, 232, 298, 121, 274, 69, 442, 436, 51, 879, 744, 716, 515, 324, 86, 194, 79, 170, 391, 551, 652, 191, 919, 789, 447, 66, 57, 990, 23, 200, 297

ALGORITHM : Kruskal Max Spanning Tree 
694, 232, 298, 121, 274, 69, 442, 436, 51, 879, 744, 716, 515, 324, 86, 194, 79, 170, 391, 28, 270, 813, 266, 991, 828, 363, 295, 312, 373, 392, 829, 186, 191, 919, 789, 447, 66, 57, 990, 23, 200, 297.
Summary :
Dijksra' W/out heap 	 took 0.006348 seconds.	&Found max capacity =	16303
Dijksra' WITH heap 	 took 0.006288 seconds.	&Found max capacity =	16303
Kruskal  MST algo 	 took 0.033367 seconds.	&Found max capacity =	16303

=========	CASE 2	=========

Finding max capacity path	from 85-------to--------798	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
798, 4, 283, 24, 86, 194, 79, 170, 529, 321, 825, 272, 231, 519, 85

ALGORITHM : Dijkstra's using Heap
798, 4, 283, 24, 86, 194, 79, 170, 529, 321, 825, 272, 231, 519, 85

ALGORITHM : Kruskal Max Spanning Tree 
798, 4, 283, 24, 86, 194, 79, 170, 529, 321, 825, 272, 231, 519, 85.
Summary :
Dijksra' W/out heap 	 took 0.006735 seconds.	&Found max capacity =	16302
Dijksra' WITH heap 	 took 0.006419 seconds.	&Found max capacity =	16302
Kruskal  MST algo 	 took 0.032606 seconds.	&Found max capacity =	16302

=========	CASE 3	=========

Finding max capacity path	from 381-------to--------791	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
791, 750, 664, 576, 348, 581, 991, 266, 813, 270, 28, 391, 170, 79, 194, 86, 324, 515, 716, 363, 295, 312, 211, 985, 498, 0, 673, 36, 885, 53, 144, 381

ALGORITHM : Dijkstra's using Heap
791, 750, 664, 576, 348, 581, 991, 266, 813, 270, 28, 391, 551, 652, 191, 186, 829, 392, 373, 312, 211, 985, 498, 0, 673, 36, 885, 53, 144, 381

ALGORITHM : Kruskal Max Spanning Tree 
791, 750, 664, 576, 348, 581, 991, 828, 363, 295, 312, 211, 985, 498, 0, 673, 36, 885, 53, 144, 381.
Summary :
Dijksra' W/out heap 	 took 0.005414 seconds.	&Found max capacity =	16302
Dijksra' WITH heap 	 took 0.004985 seconds.	&Found max capacity =	16302
Kruskal  MST algo 	 took 0.03286 seconds.	&Found max capacity =	16302

=========	CASE 4	=========

Finding max capacity path	from 100-------to--------659	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
659, 527, 224, 333, 71, 551, 391, 170, 895, 538, 835, 422, 737, 260, 21, 103, 254, 593, 427, 679, 220, 100

ALGORITHM : Dijkstra's using Heap
659, 527, 224, 333, 71, 551, 391, 170, 895, 538, 835, 422, 737, 260, 21, 103, 254, 593, 427, 679, 220, 100

ALGORITHM : Kruskal Max Spanning Tree 
659, 527, 224, 870, 866, 987, 997, 266, 813, 270, 28, 391, 170, 895, 169, 178, 101, 105, 490, 340, 737, 260, 21, 103, 254, 593, 427, 679, 220, 100.
Summary :
Dijksra' W/out heap 	 took 0.0074 seconds.	&Found max capacity =	16294
Dijksra' WITH heap 	 took 0.002327 seconds.	&Found max capacity =	16294
Kruskal  MST algo 	 took 0.032684 seconds.	&Found max capacity =	16294


/*****************************************************************/
/*******************		GRAPH 7		****************/
/*****************************************************************/
TOTAL number of edges = 	123370
For Graph generation	0.069523 seconds.

=========	CASE 0	=========

Finding max capacity path	from 530-------to--------168	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
168, 11, 560, 62, 143, 631, 407, 530

ALGORITHM : Dijkstra's using Heap
168, 11, 560, 62, 143, 631, 407, 530

ALGORITHM : Kruskal Max Spanning Tree 
168, 766, 807, 203, 765, 816, 560, 62, 143, 631, 407, 530.
Summary :
Dijksra' W/out heap 	 took 0.000931 seconds.	&Found max capacity =	16308
Dijksra' WITH heap 	 took 0.001488 seconds.	&Found max capacity =	16308
Kruskal  MST algo 	 took 0.032252 seconds.	&Found max capacity =	16308

=========	CASE 1	=========

Finding max capacity path	from 794-------to--------70	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
70, 334, 227, 494, 635, 832, 775, 961, 90, 887, 844, 476, 619, 20, 969, 233, 996, 499, 741, 570, 176, 254, 735, 159, 138, 720, 72, 999, 221, 350, 856, 794

ALGORITHM : Dijkstra's using Heap
70, 146, 391, 635, 832, 775, 598, 811, 417, 753, 615, 989, 190, 858, 231, 975, 215, 828, 498, 852, 625, 350, 856, 794

ALGORITHM : Kruskal Max Spanning Tree 
70, 334, 227, 494, 635, 832, 775, 598, 811, 417, 753, 615, 989, 190, 858, 231, 975, 215, 828, 498, 852, 625, 350, 856, 794.
Summary :
Dijksra' W/out heap 	 took 0.003014 seconds.	&Found max capacity =	16296
Dijksra' WITH heap 	 took 0.002642 seconds.	&Found max capacity =	16296
Kruskal  MST algo 	 took 0.032841 seconds.	&Found max capacity =	16296

=========	CASE 2	=========

Finding max capacity path	from 506-------to--------36	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
36, 596, 29, 171, 158, 272, 378, 1, 123, 104, 294, 804, 973, 506

ALGORITHM : Dijkstra's using Heap
36, 596, 29, 171, 158, 661, 169, 964, 740, 631, 407, 558, 850, 27, 90, 887, 545, 338, 3, 54, 316, 855, 14, 309, 655, 441, 823, 581, 233, 166, 684, 225, 975, 70, 146, 391, 635, 832, 775, 598, 104, 294, 804, 973, 506

ALGORITHM : Kruskal Max Spanning Tree 
36, 596, 29, 74, 376, 860, 255, 211, 641, 395, 64, 742, 341, 556, 581, 233, 969, 20, 648, 981, 168, 766, 807, 203, 765, 816, 560, 11, 723, 973, 506.
Summary :
Dijksra' W/out heap 	 took 0.002578 seconds.	&Found max capacity =	16248
Dijksra' WITH heap 	 took 0.005529 seconds.	&Found max capacity =	16248
Kruskal  MST algo 	 took 0.032271 seconds.	&Found max capacity =	16248

=========	CASE 3	=========

Finding max capacity path	from 663-------to--------956	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
956, 869, 715, 710, 289, 635, 832, 775, 598, 13, 324, 601, 946, 648, 981, 168, 766, 663

ALGORITHM : Dijkstra's using Heap
956, 869, 715, 710, 289, 635, 832, 775, 598, 13, 324, 601, 846, 115, 467, 648, 981, 168, 766, 663

ALGORITHM : Kruskal Max Spanning Tree 
956, 869, 715, 710, 289, 635, 832, 775, 598, 13, 324, 601, 946, 648, 981, 168, 766, 663.
Summary :
Dijksra' W/out heap 	 took 0.010012 seconds.	&Found max capacity =	16281
Dijksra' WITH heap 	 took 0.009607 seconds.	&Found max capacity =	16281
Kruskal  MST algo 	 took 0.032497 seconds.	&Found max capacity =	16281

=========	CASE 4	=========

Finding max capacity path	from 789-------to--------963	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
963, 589, 509, 607, 714, 984, 160, 100, 169, 661, 163, 15, 583, 17, 498, 852, 49, 692, 789

ALGORITHM : Dijkstra's using Heap
963, 589, 509, 607, 714, 889, 466, 90, 990, 320, 498, 852, 49, 692, 789

ALGORITHM : Kruskal Max Spanning Tree 
963, 589, 883, 563, 470, 49, 692, 789.
Summary :
Dijksra' W/out heap 	 took 0.013027 seconds.	&Found max capacity =	16180
Dijksra' WITH heap 	 took 0.012543 seconds.	&Found max capacity =	16180
Kruskal  MST algo 	 took 0.032251 seconds.	&Found max capacity =	16180


/*****************************************************************/
/*******************		GRAPH 8		****************/
/*****************************************************************/
TOTAL number of edges = 	123358
For Graph generation	0.069627 seconds.

=========	CASE 0	=========

Finding max capacity path	from 796-------to--------770	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
770, 118, 140, 159, 173, 114, 752, 15, 360, 571, 297, 936, 796

ALGORITHM : Dijkstra's using Heap
770, 118, 462, 574, 590, 153, 779, 484, 924, 904, 597, 857, 849, 482, 170, 371, 62, 930, 658, 270, 333, 793, 670, 617, 109, 92, 908, 297, 936, 796

ALGORITHM : Kruskal Max Spanning Tree 
770, 512, 316, 872, 241, 139, 286, 808, 665, 480, 297, 936, 796.
Summary :
Dijksra' W/out heap 	 took 0.011554 seconds.	&Found max capacity =	16188
Dijksra' WITH heap 	 took 0.009362 seconds.	&Found max capacity =	16188
Kruskal  MST algo 	 took 0.032118 seconds.	&Found max capacity =	16188

=========	CASE 1	=========

Finding max capacity path	from 996-------to--------553	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
553, 954, 997, 679, 107, 126, 22, 930, 62, 83, 473, 246, 986, 511, 136, 142, 259, 189, 403, 133, 584, 627, 565, 358, 996

ALGORITHM : Dijkstra's using Heap
553, 954, 997, 679, 107, 640, 812, 349, 774, 710, 535, 21, 229, 480, 665, 808, 286, 620, 426, 83, 473, 246, 986, 296, 288, 154, 398, 218, 259, 189, 403, 133, 584, 627, 565, 358, 996

ALGORITHM : Kruskal Max Spanning Tree 
553, 954, 997, 679, 107, 126, 22, 930, 62, 83, 473, 246, 986, 296, 288, 154, 398, 218, 259, 189, 888, 150, 71, 555, 59, 2, 942, 528, 809, 750, 214, 823, 102, 213, 111, 25, 241, 139, 286, 808, 665, 480, 229, 300, 874, 627, 565, 358, 996.
Summary :
Dijksra' W/out heap 	 took 0.007639 seconds.	&Found max capacity =	16284
Dijksra' WITH heap 	 took 0.005799 seconds.	&Found max capacity =	16284
Kruskal  MST algo 	 took 0.032568 seconds.	&Found max capacity =	16284

=========	CASE 2	=========

Finding max capacity path	from 338-------to--------274	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
274, 758, 89, 880, 345, 634, 71, 555, 59, 444, 287, 328, 156, 464, 990, 5, 708, 208, 116, 427, 878, 628, 190, 338

ALGORITHM : Dijkstra's using Heap
274, 280, 705, 835, 21, 351, 894, 385, 284, 190, 338

ALGORITHM : Kruskal Max Spanning Tree 
274, 758, 89, 224, 997, 679, 107, 126, 22, 930, 62, 83, 473, 246, 986, 296, 288, 154, 398, 218, 259, 189, 888, 150, 71, 555, 59, 2, 942, 528, 809, 750, 214, 823, 102, 213, 111, 25, 241, 139, 286, 620, 479, 973, 351, 894, 385, 284, 190, 338.
Summary :
Dijksra' W/out heap 	 took 0.00844 seconds.	&Found max capacity =	16247
Dijksra' WITH heap 	 took 0.002757 seconds.	&Found max capacity =	16247
Kruskal  MST algo 	 took 0.03205 seconds.	&Found max capacity =	16247

=========	CASE 3	=========

Finding max capacity path	from 950-------to--------883	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
883, 104, 147, 351, 21, 535, 710, 774, 349, 812, 456, 488, 61, 950

ALGORITHM : Dijkstra's using Heap
883, 104, 147, 351, 21, 535, 710, 774, 349, 812, 456, 488, 61, 950

ALGORITHM : Kruskal Max Spanning Tree 
883, 104, 147, 351, 21, 535, 710, 774, 349, 812, 456, 488, 61, 950.
Summary :
Dijksra' W/out heap 	 took 0.013071 seconds.	&Found max capacity =	16177
Dijksra' WITH heap 	 took 0.012668 seconds.	&Found max capacity =	16177
Kruskal  MST algo 	 took 0.032069 seconds.	&Found max capacity =	16177

=========	CASE 4	=========

Finding max capacity path	from 578-------to--------620	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
620, 426, 83, 62, 930, 22, 126, 107, 640, 812, 456, 488, 251, 982, 441, 53, 377, 925, 333, 793, 504, 487, 443, 489, 645, 731, 519, 578

ALGORITHM : Dijkstra's using Heap
620, 286, 808, 820, 264, 952, 755, 647, 163, 107, 679, 997, 954, 684, 504, 487, 443, 489, 645, 731, 519, 578

ALGORITHM : Kruskal Max Spanning Tree 
620, 286, 139, 241, 25, 111, 213, 102, 823, 214, 750, 809, 528, 942, 2, 59, 555, 71, 150, 888, 189, 259, 218, 398, 154, 288, 296, 986, 246, 473, 83, 62, 930, 22, 126, 107, 679, 997, 954, 684, 504, 487, 443, 489, 645, 731, 519, 578.
Summary :
Dijksra' W/out heap 	 took 0.010096 seconds.	&Found max capacity =	16267
Dijksra' WITH heap 	 took 0.00888 seconds.	&Found max capacity =	16267
Kruskal  MST algo 	 took 0.032223 seconds.	&Found max capacity =	16267


/*****************************************************************/
/*******************		GRAPH 9		****************/
/*****************************************************************/
TOTAL number of edges = 	123510
For Graph generation	0.071719 seconds.

=========	CASE 0	=========

Finding max capacity path	from 964-------to--------82	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
82, 414, 312, 896, 279, 391, 439, 14, 13, 95, 415, 424, 565, 282, 518, 557, 59, 143, 271, 47, 665, 355, 502, 510, 730, 964

ALGORITHM : Dijkstra's using Heap
82, 414, 312, 896, 858, 168, 165, 127, 383, 496, 502, 510, 730, 964

ALGORITHM : Kruskal Max Spanning Tree 
82, 414, 120, 186, 149, 467, 464, 295, 725, 459, 208, 58, 832, 510, 730, 964.
Summary :
Dijksra' W/out heap 	 took 0.004864 seconds.	&Found max capacity =	16282
Dijksra' WITH heap 	 took 0.002642 seconds.	&Found max capacity =	16282
Kruskal  MST algo 	 took 0.033766 seconds.	&Found max capacity =	16282

=========	CASE 1	=========

Finding max capacity path	from 787-------to--------168	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 730, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 787

ALGORITHM : Dijkstra's using Heap
168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 730, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 787

ALGORITHM : Kruskal Max Spanning Tree 
168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 725, 459, 208, 58, 832, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 787.
Summary :
Dijksra' W/out heap 	 took 0.006208 seconds.	&Found max capacity =	16306
Dijksra' WITH heap 	 took 0.00611 seconds.	&Found max capacity =	16306
Kruskal  MST algo 	 took 0.035551 seconds.	&Found max capacity =	16306

=========	CASE 2	=========

Finding max capacity path	from 742-------to--------73	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
73, 642, 165, 168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 730, 510, 502, 496, 383, 127, 532, 929, 449, 913, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 605, 742

ALGORITHM : Dijkstra's using Heap
73, 642, 165, 168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 730, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 605, 742

ALGORITHM : Kruskal Max Spanning Tree 
73, 642, 165, 168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 725, 459, 208, 58, 832, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 779, 654, 605, 742.
Summary :
Dijksra' W/out heap 	 took 0.008008 seconds.	&Found max capacity =	16304
Dijksra' WITH heap 	 took 0.006861 seconds.	&Found max capacity =	16304
Kruskal  MST algo 	 took 0.033427 seconds.	&Found max capacity =	16304

=========	CASE 3	=========

Finding max capacity path	from 799-------to--------189	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
189, 73, 642, 165, 127, 383, 837, 799

ALGORITHM : Dijkstra's using Heap
189, 73, 642, 165, 127, 383, 837, 799

ALGORITHM : Kruskal Max Spanning Tree 
189, 73, 642, 165, 168, 858, 896, 312, 414, 120, 186, 149, 467, 464, 295, 725, 459, 208, 58, 832, 510, 502, 496, 383, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 518, 399, 746, 608, 615, 506, 294, 818, 590, 36, 837, 799.
Summary :
Dijksra' W/out heap 	 took 0.002338 seconds.	&Found max capacity =	16286
Dijksra' WITH heap 	 took 0.007877 seconds.	&Found max capacity =	16286
Kruskal  MST algo 	 took 0.040636 seconds.	&Found max capacity =	16286

=========	CASE 4	=========

Finding max capacity path	from 407-------to--------655	 printed in reverse order

ALGORITHM : Dijkstra's without Heap
655, 664, 233, 349, 613, 479, 182, 3, 72, 87, 242, 183, 538, 95, 415, 424, 565, 282, 498, 40, 677, 580, 252, 395, 129, 115, 437, 161, 938, 845, 671, 950, 172, 277, 132, 38, 691, 834, 294, 506, 615, 471, 846, 574, 835, 543, 877, 509, 407

ALGORITHM : Dijkstra's using Heap
655, 624, 164, 743, 23, 725, 652, 48, 187, 40, 498, 779, 919, 574, 835, 543, 877, 509, 407

ALGORITHM : Kruskal Max Spanning Tree 
655, 624, 164, 743, 23, 5, 133, 690, 101, 651, 304, 327, 64, 348, 919, 574, 835, 543, 877, 509, 407.
Summary :
Dijksra' W/out heap 	 took 0.007525 seconds.	&Found max capacity =	16275
Dijksra' WITH heap 	 took 0.002952 seconds.	&Found max capacity =	16275
Kruskal  MST algo 	 took 0.040565 seconds.	&Found max capacity =	16275
Reached End of Code Successfully 
